GCP env
~~~~~~~~~~
- 3 machines
	1 -> kube master (kmaster)
			- RAM: 4GB, 2 CPUs
			- OS: Ubuntu:18.04 / CentOS 7/RHEL 7
			- Ports:
				- 2379, 6443, 10250, 10251, 10252
	
	2 -> kube worker (worker-1, worker-2)
			- RAM: 4GB, 2 CPUs
			- OS: Ubuntu:18.04 / CentOS 7/RHEL 7
			- Ports:
				- 10250, 30000-32767
				
On cloud VMS (Kmaster)
~~~~~~~~~~~~~~~~~~~~~~~~~
1. disable swap
	# swapoff -a
	# vim /etc/fstab
		#comment the line that says
			swap...
		:wq!
	# mount -a
	
2. Enable the module in the firewall
	#lsmod | grep br_netfilter		// if no output, then run below cmd
	#modprobe br_netfilter			
	#lsmod | grep br_netfilter		//verify
	
3. Allow the rules on FW
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-iptables=1
EOF
	
	# sysctl --system
	
4. Installing the docker
	1. update the pkgs
		# apt-get update -y
		
	2. install below cmds:
		# apt-get install -y  apt-transport-https ca-certificates curl software-properties-common gnupg2
		
	3. adding docker repository:
		# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
		
	4. adding another repo:
		# add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
     $(lsb_release -cs) \
     stable"
		
	5. installing actual docker & supporting pkgs:
		# apt-get update -y && apt-get install -y containerd.io docker-ce docker-ce-cli
		
5. config docker daemon
#cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
	"max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

	# mkdir -p /etc/systemd/system/docker.service.d
	
6. reload, restart & check the docker status
	# systemctl daemon-reload
	# systemctl enable docker
	# systemctl restart docker
	# systemctl status docker
	
7. Installing kubelet, kubeadm, kubectl commands
	1. update 
		# apt-get update -y && apt-get install -y curl
	
	2. add kubernetes repo
		# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
		
3. add the k8s master list
# cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
		
	4. install the packages
		# apt-get update -y
		# apt-get install -y kubeadm kubectl kubelet
		
	5. hold the packages
		# apt-mark hold kubeadm kubectl kubelet
	
	6. enable, restart & check the status of the kubelet
		#systemctl daemon-reload
		#systemctl enable kubelet
		#systemctl restart kubelet
		#systemctl status kubelet
		
	7. remove file	
		# rm /etc/containerd/config.toml; systemctl restart containerd
		
	8. init the kubelet (only on master svr)
		# kubeadm init
		
	9. run these cmds: (only on master svr)
		# mkdir -p $HOME/.kube
		# cp -i /etc/kubernetes/admin.conf  $HOME/.kube/config
		# chown $(id -u):$(id -g) $HOME/.kube/config
		
	10. install weave-net addon on master machine (only on master svr):
		# kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
		
	11. on worker(s) machine:
		kubeadm join .......
		
		to fetch the joining command (only on master svr), 
			# kubeadm token create --print-join-command
			
######################### instllation of kubernetes over ##########################################
on master, 

- to list all the pre-defined pods
# kubectl get pods -n kube-system				//list pods
# kubectl get pods -n kube-system -o wide			//list pods in detailed
	
- to list all the nodes
# kubectl get nodes
# kubectl get nodes -o wide
	
list of network-addons
	flannel
	calico
	weave-net
	cilium
	antre
	kube-iptables-trailer
	NSX-T
	Azure CNI
	AWS VPC CNI
	GKE VPC Network peering
	
weave-net:
	- simple & flexible for K8s
	- this allows direct communication between pods.
	- it has encryption, DNS-based service discovery
	- it is used by small/medium scale enter.
	
Pod:
------
writing the pod config file:
	apiVersion: v1
	kind: Pod
	metadata: 
	  name: nginx-file-pod
	  labels:
		app: nginx
		tier: dev
	spec:
	  containers:
	  - name: nginfile-container
		image: nginx
		env:
		- name: demo_env
		  value: "THis is 1st POD config"
		ports:
		- containerPort: 80
		
	:wq!
	
sections of yaml file
----------------------
1. apiVersion
	- it is a required field
	- specified the k8s version
	- ex:
		apiVersion: v1
		apiVersion: apps/v1
		apiVersion: rbac.authorization.k8s.io/v1
		apiVersion: batch/v1
		apiVersion: batch/v1beta1
		apiVersion: extensions/v1beta1
		
2. kind
	- it is a required field
	- it defines the kind of object u want to create
	- object: pod, deployment, services, replicaset, daemonSet
	- ex:
		kind: pod
		kind: deployment
		kind: services
		kind: replicaset
		kind: daemonset
		
3. Metadata
	- data abt data
	- defines name, labels..
	- it is a required field
	
4. spec
	- it contains definition of the container
	- it contains	
		image, name, ports, etc.
	- it is a required field
	
5. container
	- it comes under "spec" field
	- here we specify container name, vol, image name, ports, env variables.

commands related to pods:
--------------------
listing all pods:
# kubectl get pods
	
listing all pods in details:
# kubectl get pods -o wide
	
listing nginx-pod.yaml content:
	# vim nginx-pod.yaml
		apiVersion: v1
		kind: Pod
		metadata: 
		  name: nginx-file-pod
		  labels:
			app: nginx
			tier: dev
		spec:
		  containers:
		  - name: nginfile-container
			image: nginx
			env:
			- name: demo_env
			  value: "THis is 1st POD config"
			ports:
			- containerPort: 80
	:wq!
	
applying nginx config yaml file:
# kubectl apply -f nginx-pod.yaml
 
listing all pods in default namespace:
# kubectl get pods -n default
	
Creating web-nginx
# vim web-nginx.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80

	:wq!

Applying another pod
# kubectl apply -f web-nginx.yaml 

listing all pods
# kubectl get pods
	
deleting specific pod from the list
# kubectl delete pod nginx-deployment

listing pods now:
# kubectl get pods

listing pods with details:
# kubectl get pods -o wide
	
listing the pod details in json format
# kubectl get pods  nginx-file-pod -o json

listing the pod details in yaml format
# kubectl get pods  nginx-file-pod -o yaml
	
describing a pod
# kubectl describe pod nginx-file-pod 

editing a pods content
# kubectl edit pod nginx-pod
	
checking logs
# kubectl logs  nginx-pod

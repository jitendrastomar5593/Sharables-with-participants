CONFIGMAPS:
########################################################
1. Creating Configmap Declaratively (Using YAML file):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Example-1:
---------
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config-yaml
data:
  ENV_ONE: "va1ue1" 
  ENV_TWO: "va1ue2"

Example-2:
---------
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-nginx-config-yaml
data:
  my-nginx-config.conf: |-
    server {
      listen 80;
      server_name www.jeetusingh.in;
      gzip on;
      gzip_types text/plain application/xml;
      location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
      }
    }
    sleep-interval: 25

****************************************************************************

2. Creating ConfigMap Imperatively (from Command line):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kubectl create configmap <NAME> <SOURCE>


From Literal value:
------------------
kubectl create configmap env-config-cmd --from-literal=ENV_ONE=value1 --from-literal=ENV_TWO=value2


From File:
----------
kubectl create configmap my-ngix-config-file-cmd --from-file=/path/to/configmap-file.txt

kubectl create configmap my-config --from-file=path/to/bar

****************************************************************************

3. Injecting ConfigMap into Pod As Environment Variables (1/3):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# cm-pod-env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cm-pod-env
spec:
  containers:
    - name: test-container
      image: nginx
      env:
      - name: ENV_VARIABLE_1
        valueFrom:
          configMapKeyRef:
            name: env-config-yaml
            key: ENV_ONE
      - name: ENV_VARIABLE_2
        valueFrom:
          configMapKeyRef:
            name: env-config-yaml
            key: ENV_TWO
  restartPolicy: Never


Deploy:
-------
kubectl apply -f cm-pod-env.yaml

Validate:
---------
kubectl exec cm-pod-env -- env | grep ENV
****************************************************************************


4. Injecting ConfigMap into Pod As Arguments(2/2):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# cm-pod-arg.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cm-pod-arg
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "echo $(ENV_VARIABLE_1) and $(ENV_VARIABLE_2)" ]
      env:
      - name: ENV_VARIABLE_1
        valueFrom:
          configMapKeyRef:
            name: env-config-yaml
            key: ENV_ONE
      - name: ENV_VARIABLE_2
        valueFrom:
          configMapKeyRef:
            name: env-config-yaml
            key: ENV_TWO
  restartPolicy: Never


Deploy:
---------
kubectl apply -f cm-pod-arg.yaml

Validate:
---------
kubectl logs cm-pod-arg


***************************************************************************************************


5. Injecting ConfigMap into As Files inside Volume(3/3):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# cm-pod-file-vol.yaml
apiVersion: v1
kind: Pod
metadata:
  name: cm-pod-file-vol
spec:
  volumes:
    - name: mapvol
      configMap:
        name: my-nginx-config-yaml
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
      - name: mapvol
        mountPath: /etc/config
  restartPolicy: Never


Deploy:
-------
kubectl apply -f cm-pod-file-vol.yaml

Validate:
----------
kubectl exec configmap-vol-pod -- ls /etc/config
kubectl exec configmap-vol-pod -- cat /etc/config/etc/config/my-nginx-config.conf


****************************************************************************
****************************************************************************
****************************************************************************

SECRETS
#######################################
1. Using Base64 Encoding in creating Secret:
--------------------------------------------
# db-user-pass.yaml
apiVersion: v1
kind: Secret
metadata:
  name: db-user-pass
  namespace: default
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

Deploy:
-------
kubectl apply –f secret-db-user-pass.yaml 


******************************************

2. Injecting "Secrets" into Pod As Environmental Variables:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# my-secrets-pod-env.yaml

apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: db-user-pass
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: db-user-pass
            key: password
  restartPolicy: Never


Validate:
---------
kubectl exec secret-env-pod -- env
kubectl exec secret-env-pod -- env | grep SECRET



***************************************************

3. Injecting "Secrets" into Pod As Files inside the Volume:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# my-secrets-vol-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-vol-pod
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
        - name: secret-volume
          mountPath: /etc/secret-volume
  volumes:
    - name: secret-volume
      secret:
        secretName: test-secret

    
Validate:
---------
kubectl exec secret-vol-pod -- ls /etc/secret-volume
kubectl exec secret-vol-pod -- cat /etc/secret-volume/username
kubectl exec secret-vol-pod -- cat /etc/secret-volume/password

*******************************

Node-Selector
#######################################
1. Deploying Node-Selector YAML:
--------------------------------

# nodeSelector-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nodeselector-pod
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  nodeSelector:
    disktype: ssd

-------

kubectl apply -f ns.yaml

*******************************

SECRETS
#######################################



Manifest & templating: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/
K8s metrix: # kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
			# kubectl get deploy,svc -n kube-system | egrep metrics-server
			
			URL: https://github.com/kubernetes-sigs/metrics-server
			
steps to disable it:
S1: kubectl edit deploy -n kube-system metrics-server 
on line 45
S2: - ––kubelet-insecure-tls=true
			:wq!
			

Running resources yaml:
b. Then, deploy this Pod with memory requests and limits as mentioned below
----------------------------------------------------------------------------
#memory-demo.yaml
apiVersion: v1
kind: Pod
metadata:
  name: memory-demo
spec:
  containers:
  - name: memory-demo-ctr
    image: polinux/stress
    resources:
      requests:
        memory: "100Mi"
      limits:
        memory: "200Mi"
    command: ["stress"]
    args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]





